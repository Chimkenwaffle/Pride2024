#include "attack.h"

void Attack::init() {
    // Initialize the attack algorithm
    Drivetrain::power = 0.75;
}

float dampen(float x) {
  return fmin(1.0, 0.1 * pow(M_E, 3.0 * x));
  // return fmax(0, fmin(1, 0.02 * pow(1.0001, 20 * (x - 10))));
}


float getBallOffset(float inAngle) {
  float formulaAngle = inAngle > 180.0 ? 360 - inAngle : inAngle;
  return (fmin(0.05 * pow(M_E, 0.15 * formulaAngle + 1.8), 90));
}


const double rotation_P = .4;
const double rotation_D = 0.1;
fPDController rotationController = fPDController(rotation_P, rotation_D);
AngleRad prev_robo_angle = 0;
void Attack::loop(int threadID) {
    BallSensor::getBallAngleVector(true);

    AngleDeg cartesianBallAngle = BallSensor::ball_angle_deg;
    AngleDeg forwardAngle = cartesianBallAngle.forwardAngle();

    float offset = getBallOffset(fabs(forwardAngle.value));
    float dampenPercent = dampen(BallSensor::ball_mag);
    offset *= dampenPercent;

    AngleDeg finalAngle = forwardAngle > 0 ? forwardAngle + offset : forwardAngle - offset;

    Vector ballDriveAngle = finalAngle.cartesianAngle().toVector();


    AngleRad roboAngle = Gyro::getHeading();

    float rotation = rotationController.update(roboAngle.value);
    rotation = fclamp(rotation, -0.3, 0.3);

    // LineSensor::read();
    // LineSensor::preProcessLineSensors();
    // sensor_group_data data = LineSensor::calculateLineSensorGroups();
    // Vector direction = Vector(0, 0);
    // Vector normalLineSensor = Vector(0, 0);

    // if (data.bestI != 0 || data.bestJ != 0) {
    //     normalLineSensor = LineSensor::lineSensorVectors[data.bestI] + LineSensor::lineSensorVectors[data.bestJ];

    //     AngleRad rightAngle = normalLineSensor + AngleRad(3.14/2);
    //     AngleRad leftAngle = normalLineSensor + AngleRad(-3.14/2);

    //     AngleRad rightBetween = rightAngle.angleDifference(ballDriveAngle.toAngleRad());
    //     AngleRad leftBetween = leftAngle.angleDifference(ballDriveAngle.toAngleRad());

    //     if (fabs(rightBetween.value) < fabs(leftBetween.value)) {
    //         direction = rightAngle.toVector();
    //     } else {
    //         direction = leftAngle.toVector();
    //     }
    // }

  // LineSensor::processLineSensors(true);

  // Serial.println("HI");
  // Serial.println(ballDriveAngle.toAngleDeg().value);

  // if (direction.x == 0 && direction.y == 0) {
    Drivetrain::vectorDrive(ballDriveAngle, 1, rotation);
  // } else {
  //   if (direction.toAngleRad().angleDifference(ballDriveAngle.toAngleRad()).toDeg().value > 80) {
  //     Drivetrain::vectorDrive(Vector(-direction.x, -direction.y), 1, rotation);
  //   } else {
  //     Drivetrain::vectorDrive(direction + Vector(-ballDriveAngle.x, -ballDriveAngle.y), 1.0, rotation);
  //   }
  // }
  // // Drivetrain::vectorDrive()

  // Drivetrain::driveByVectors();


  // delay(1000/100);
}